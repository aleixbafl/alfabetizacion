/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package fills;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import objectesBD.usuariBD;
import panells.families;
import serverConexio.conexioBD;

/**
 *
 * @author aleix
 */
public class afegir extends javax.swing.JFrame {

    /**
     * Creates new form afegir
     */
    public afegir() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dni = new javax.swing.JTextField();
        nom = new javax.swing.JTextField();
        cognoms = new javax.swing.JTextField();
        dataCalendari = new com.toedter.calendar.JCalendar();
        afegir = new javax.swing.JButton();
        tornar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Afegir Fill");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("DNI:");

        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Nom:");

        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Cognoms:");

        dni.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        nom.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cognoms.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        dataCalendari.setForeground(new java.awt.Color(0, 0, 0));

        afegir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        afegir.setForeground(new java.awt.Color(0, 0, 0));
        afegir.setText("Afegir");
        afegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afegirActionPerformed(evt);
            }
        });

        tornar.setForeground(new java.awt.Color(0, 0, 0));
        tornar.setText("MENU ");
        tornar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tornarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tornar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(dataCalendari, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dni)
                            .addComponent(nom)
                            .addComponent(cognoms, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                    .addComponent(afegir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(28, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(dni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tornar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 19, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cognoms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dataCalendari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(afegir)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tornarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tornarActionPerformed
        ImageIcon icono = new ImageIcon("img/logo.png");

        families panellFamilies = new families();
        panellFamilies.setTitle("Panell Família - Alfabetització");
        panellFamilies.setMinimumSize(new java.awt.Dimension(600, 500));
        //panellFamilies.setResizable(false);
        panellFamilies.setLocationRelativeTo(null);
        panellFamilies.setIconImage(icono.getImage());

        this.dispose();
        panellFamilies.setVisible(true);
    }//GEN-LAST:event_tornarActionPerformed

    private void afegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afegirActionPerformed
        if (dni.getText().isEmpty()) {
            missatge("Has d'introduir el DNI.");
        } else if (nom.getText().isEmpty()) {
            missatge("Has d'introduir el nom.");
        } else if (cognoms.getText().isEmpty()) {
            missatge("Has d'introduir els cognoms.");
        } else {
            if (dniCorrecte(dni.getText())) {
                if (dataCorrecte(dataCalendari.getCalendar())) {
                    String dniPares = obtenirPares();
                    String[] dniParesSplit = new String[2];
                    if (dniPares.contains("|")) {
                        String[] stringSplit = dniPares.split("|");
                        dniParesSplit[1] = stringSplit[1];
                        dniParesSplit[2] = stringSplit[2];
                    }
                    usuariBD user = llegirUsuari();
                    conexioBD bd = new conexioBD();
                    bd.obrirConexio();
                    try {
                        System.out.println(dniParesSplit.length);
                        bd.ecjecutarActualitzar("INSERT INTO `fills`(`dni`, `nom`, `cognoms`, `dataNaixe`) VALUES ('" + dni.getText() + "','" + nom.getText() + "','" + cognoms.getText() + "','" + dataString(dataCalendari.getCalendar()) + "');");
                        if (dniPares.contains("|")) {
                            bd.ecjecutarActualitzar("INSERT INTO `familia`(`dniProje1`, `dniProje2`, `dniFill`, `nomUsuariFamil`) VALUES ('" + dniParesSplit[1] + "','" + dniParesSplit[2] + "','" + dni.getText() + "','" + user.getNomUsuari() + "')");
                        } else {
                            bd.ecjecutarActualitzar("INSERT INTO `familia`(`dniProje1`, `dniFill`, `nomUsuariFamil`) VALUES ('" + dniPares + "','" + dni.getText() + "','" + user.getNomUsuari() + "')");
                        }
                    } catch (SQLException ex) {
                        missatge("Error en el procés de la BD.");
                    }
                    missatge("El fill s'ha afegit correctament.");
                    dni.setText("");
                    nom.setText("");
                    cognoms.setText("");
                    dataCalendari.setCalendar(dataLocal());
                }
            }
        }
    }//GEN-LAST:event_afegirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(afegir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(afegir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(afegir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(afegir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new afegir().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton afegir;
    private javax.swing.JTextField cognoms;
    private com.toedter.calendar.JCalendar dataCalendari;
    private javax.swing.JTextField dni;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField nom;
    private javax.swing.JButton tornar;
    // End of variables declaration//GEN-END:variables

    private void missatge(String missatge) {
        JOptionPane.showMessageDialog(rootPane, missatge);
    }
    
    private boolean dniCorrecte(String dni) {
        if (dni.length() != 9) {
            missatge("El DNI ha de ser compost per 8 números i una lletra al final.");
            return false;
        }

        String numeros = "";
        for (int i = 0; i < dni.length() - 1; i++) {
            numeros = numeros + dni.charAt(i);
        }

        char lletra = Character.toUpperCase(dni.charAt(8));

        if (!numeros.matches("[0-9]+")) {
            return false;
        }

        char lletraCalcul = calcularLletraDNI(Integer.parseInt(numeros));

        if (lletraCalcul == lletra) {
            conexioBD conexio = new conexioBD();
            conexio.obrirConexio();
            try {
                ResultSet resultat = conexio.ecjecutarSelect("SELECT * FROM `fills` WHERE `fills`.`dni` LIKE '" + numeros + lletra + "';");
                if (resultat.next()) {
                    missatge("El DNI d'aquest nen/a ja està registrat i no es pot tornar a registrar-lo.");
                    conexio.tancaConexio();
                    return false;
                }
                conexio.tancaConexio();
            } catch (SQLException ex) {
                System.out.println(ex);
            }
        }
        if (lletraCalcul != lletra) {
            missatge("El DNI introduït és incorrecte.");
        }
        return lletraCalcul == lletra;
    }

    private char calcularLletraDNI(int numerosDNI) {
        String lletres = "TRWAGMYFPDXBNJZSQVHLCKE";
        int index = numerosDNI % 23;
        return lletres.charAt(index);
    }
    
    private boolean dataCorrecte(Calendar dataCalen) {
        String data = dataString(dataCalen);

        LocalDate dataGuardada = LocalDate.parse(data, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate dataActual = LocalDate.now();

        int anys = Period.between(dataGuardada, dataActual).getYears();
        if ((anys > 6) || (anys < 3)) {
            missatge("Els fills han de tenir entre 3 i 6 anys.");
            return false;
        } else {
            return true;
        }
    }
    
    private String dataString(Calendar calendar) {
        SimpleDateFormat dataForm = new SimpleDateFormat("yyyy-MM-dd");
        String data = dataForm.format(calendar.getTime());
        return data;
    }

    private String obtenirPares() {
        usuariBD user = llegirUsuari();
        
        conexioBD bd = new conexioBD();
        bd.obrirConexio();
        try {
            ResultSet resultatUsuari = bd.ecjecutarSelect("SELECT * FROM `familia` WHERE `familia`.`nomUsuariFamil` LIKE '" + user.getNomUsuari() + "'; ");
            if (resultatUsuari.next()) {
                if (resultatUsuari.getString("dniProje2") == null) {
                    return resultatUsuari.getString("dniProje1");
                } else {
                    return resultatUsuari.getString("dniProje1") + "|" + resultatUsuari.getString("dniProje2");
                }
            }
        } catch (SQLException ex) {
            missatge("Error en el procés de la BD.");
        }
        return null;
    }

    private usuariBD llegirUsuari() {
        File f = new File("usuari.usr");
        if (f.exists()) {
            try {
                FileInputStream fis = new FileInputStream(f);
                ObjectInputStream ois = new ObjectInputStream(fis);
                while (fis.available() > 0 ) {
                    usuariBD userLogin = (usuariBD) ois.readObject();
                    return userLogin;
                }
                ois.close();
                fis.close();
            } catch (FileNotFoundException ex) {
                missatge("Error d'ubicació i/o de nom de la lectura de l'arxiu de les credencials.");
            } catch (IOException ex) {
                missatge("Error de lectura de les credencials.");
            } catch (ClassNotFoundException ex) {
                missatge("Error no especificat.");
            }
        }
        return null;
    }

    private Calendar dataLocal() {
        LocalDate dataActual = LocalDate.now();
        Calendar calendar = Calendar.getInstance();
        calendar.clear(); // Limpiar cualquier valor anterior en el Calendar
        calendar.set(dataActual.getYear(), dataActual.getMonthValue() - 1, dataActual.getDayOfMonth());
        return calendar;
    }
}
