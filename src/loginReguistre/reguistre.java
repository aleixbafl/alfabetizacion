/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginReguistre;

import java.sql.SQLException;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.mindrot.jbcrypt.BCrypt;
import serverConexio.conexioBD;

/**
 *
 * @author aleix
 */
public class reguistre extends javax.swing.JFrame {

    private boolean dosProgenitos = false;

    public reguistre() {
        initComponents();
        if (preguntaSiNo("Sou 2 pares/mares?") == JOptionPane.YES_OPTION) {
            dosProgenitos = true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        projenitor1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dniObligatori = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        nomObligatori = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cognomObligatori = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        dataObligatori = new com.toedter.calendar.JCalendar();
        projenitor3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        dniOpcional = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        nomOpcional = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cognomOpcional = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        dataOpcional = new com.toedter.calendar.JCalendar();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        nomUsuari = new javax.swing.JTextField();
        correuElectronic = new javax.swing.JTextField();
        contrasenya1 = new javax.swing.JPasswordField();
        jLabel15 = new javax.swing.JLabel();
        contrasenya2 = new javax.swing.JPasswordField();
        jLabel16 = new javax.swing.JLabel();
        login = new javax.swing.JButton();
        registrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Registrar-se");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
        );

        projenitor1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Progenitor 1 (obligatori):");

        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("DNI:");

        dniObligatori.setToolTipText("Ex.: 12345678A");

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Nom:");

        nomObligatori.setToolTipText("Ex.: Pepe");

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Cognom:");

        cognomObligatori.setToolTipText("Ex.: Garciá López");

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Data Naixement:");

        javax.swing.GroupLayout projenitor1Layout = new javax.swing.GroupLayout(projenitor1);
        projenitor1.setLayout(projenitor1Layout);
        projenitor1Layout.setHorizontalGroup(
            projenitor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projenitor1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(projenitor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(projenitor1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dniObligatori))
                    .addGroup(projenitor1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nomObligatori, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                    .addGroup(projenitor1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cognomObligatori, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                    .addGroup(projenitor1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dataObligatori, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        projenitor1Layout.setVerticalGroup(
            projenitor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projenitor1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(projenitor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dniObligatori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projenitor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nomObligatori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projenitor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cognomObligatori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projenitor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataObligatori, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                .addContainerGap())
        );

        projenitor3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Progenitor 2 (opcional):");

        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("DNI:");

        dniOpcional.setToolTipText("Ex.: 12345678A");

        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Nom:");

        nomOpcional.setToolTipText("Ex.: Pepe");

        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Cognom:");

        cognomOpcional.setToolTipText("Ex.: Garciá López");

        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Data Naixement:");

        javax.swing.GroupLayout projenitor3Layout = new javax.swing.GroupLayout(projenitor3);
        projenitor3.setLayout(projenitor3Layout);
        projenitor3Layout.setHorizontalGroup(
            projenitor3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projenitor3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(projenitor3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(projenitor3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dniOpcional))
                    .addGroup(projenitor3Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nomOpcional, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                    .addGroup(projenitor3Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cognomOpcional, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                    .addGroup(projenitor3Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dataOpcional, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        projenitor3Layout.setVerticalGroup(
            projenitor3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projenitor3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(projenitor3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(dniOpcional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projenitor3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(nomOpcional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projenitor3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cognomOpcional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projenitor3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataOpcional, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setOpaque(false);
        jPanel4.setRequestFocusEnabled(false);

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Usuari:");

        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Nom Usuari:");

        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Correu Electrònic:");

        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Contrasenya:");

        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("Confirmar:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(correuElectronic, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomUsuari, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(contrasenya2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(contrasenya1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(nomUsuari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(contrasenya1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(correuElectronic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(contrasenya2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        login.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        login.setForeground(new java.awt.Color(0, 0, 0));
        login.setText("Ja tinc un compte");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        registrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        registrar.setForeground(new java.awt.Color(0, 0, 0));
        registrar.setText("Registrar Compte");
        registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(projenitor1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(31, 31, 31)
                        .addComponent(projenitor3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(24, 24, 24))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projenitor3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projenitor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registrar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        projenitor1.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        ImageIcon icono = new ImageIcon("img/logo.png");

        login pantallaLogin = new login();
        pantallaLogin.setTitle("Iniciar Sessió - Alfabetització");
        pantallaLogin.setMinimumSize(new java.awt.Dimension(500, 600));
        pantallaLogin.setResizable(false);
        pantallaLogin.setLocationRelativeTo(null);
        pantallaLogin.setIconImage(icono.getImage());

        this.dispose();
        pantallaLogin.setVisible(true);
    }//GEN-LAST:event_loginActionPerformed

    private void registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarActionPerformed
        if (!campsBuits()) {
            if (dniCorrecte(dniObligatori.getText())) {
                if (dataCorrecte(dataObligatori.getCalendar())) {
                    if (dosProgenitos) {
                        if (dniCorrecte(dniOpcional.getText())) {
                            if (dataCorrecte(dataOpcional.getCalendar())) {
                                if (dniObligatori.getText().equals(dniOpcional.getText())) {
                                    missatge("El DNI dels 2 progenitors no poden ser iguals.");
                                }
                                if (usuariCorrecte()) {
                                    insertarCredencials();
                                    missatge("Dades inserides correctament.");

                                    ImageIcon icono = new ImageIcon("img/logo.png");

                                    login pantallaLogin = new login();
                                    pantallaLogin.setTitle("Iniciar Sessió - Alfabetització");
                                    pantallaLogin.setMinimumSize(new java.awt.Dimension(500, 600));
                                    pantallaLogin.setResizable(false);
                                    pantallaLogin.setLocationRelativeTo(null);
                                    pantallaLogin.setIconImage(icono.getImage());
                                    
                                    this.dispose();
                                    pantallaLogin.setVisible(true);
                                }
                            }
                        }
                    } else {
                        if (usuariCorrecte()) {
                            insertarCredencials();
                            missatge("Dades inserides correctament.");

                            ImageIcon icono = new ImageIcon("img/logo.png");

                            login pantallaLogin = new login();
                            pantallaLogin.setTitle("Iniciar Sessió - Alfabetització");
                            pantallaLogin.setMinimumSize(new java.awt.Dimension(500, 600));
                            pantallaLogin.setResizable(false);
                            pantallaLogin.setLocationRelativeTo(null);
                            pantallaLogin.setIconImage(icono.getImage());
                            
                            this.dispose();
                            pantallaLogin.setVisible(true);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_registrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(reguistre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(reguistre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(reguistre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(reguistre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new reguistre().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cognomObligatori;
    private javax.swing.JTextField cognomOpcional;
    private javax.swing.JPasswordField contrasenya1;
    private javax.swing.JPasswordField contrasenya2;
    private javax.swing.JTextField correuElectronic;
    private com.toedter.calendar.JCalendar dataObligatori;
    private com.toedter.calendar.JCalendar dataOpcional;
    private javax.swing.JTextField dniObligatori;
    private javax.swing.JTextField dniOpcional;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton login;
    private javax.swing.JTextField nomObligatori;
    private javax.swing.JTextField nomOpcional;
    private javax.swing.JTextField nomUsuari;
    private javax.swing.JPanel projenitor1;
    private javax.swing.JPanel projenitor3;
    private javax.swing.JButton registrar;
    // End of variables declaration//GEN-END:variables

    private void missatge(String missatge) {
        JOptionPane.showMessageDialog(rootPane, missatge);
    }

    private boolean campsBuits() {
        if (dniObligatori.getText().isEmpty()) {
            missatge("Per a poder registrar-te/vós primer s'ha d'omplir els camps del progenitor obligatori (falta el DNI).");
            return true;
        } else {
            if (nomObligatori.getText().isEmpty()) {
                missatge("Per a poder registrar-te/vós primer s'ha d'omplir els camps del progenitor obligatori (falta el Nom).");
                return true;
            } else {
                if (cognomObligatori.getText().isEmpty()) {
                    missatge("Per a poder registrar-te/vós primer s'ha d'omplir els camps del progenitor obligatori (falta el Cognom).");
                    return true;
                } else {
                    if (dosProgenitos) {
                        if (dniOpcional.getText().isEmpty()) {
                            missatge("Per a poder registrar-te/vós primer s'ha d'omplir els camps del progenitor opcional (falta el DNI), ja que s'ha escollit que sou 2 progenitors.");
                            return true;
                        } else {
                            if (nomOpcional.getText().isEmpty()) {
                                missatge("Per a poder registrar-te/vós primer s'ha d'omplir els camps del progenitor opcional (falta el Nom), ja que s'ha escollit que sou 2 progenitors.");
                                return true;
                            } else {
                                if (cognomOpcional.getText().isEmpty()) {
                                    missatge("Per a poder registrar-te/vós primer s'ha d'omplir els camps del progenitor opcional (falta el Cognom), ja que s'ha escollit que sou 2 progenitors.");
                                    return true;
                                }
                                return false;
                            }
                        }
                    } else {
                        return campsBuitsUsuari();
                    }
                }
            }
        }
    }

    private String dataString(Calendar calendar) {
        SimpleDateFormat dataForm = new SimpleDateFormat("yyyy-MM-dd");
        String data = dataForm.format(calendar.getTime());
        return data;
    }

    private boolean dniCorrecte(String dni) {
        if (dni.length() != 9) {
            return false;
        }

        String numeros = "";
        for (int i = 0; i < dni.length() - 1; i++) {
            numeros = numeros + dni.charAt(i);
        }

        char lletra = Character.toUpperCase(dni.charAt(8));

        if (!numeros.matches("[0-9]+")) {
            return false;
        }

        char lletraCalcul = calcularLletraDNI(Integer.parseInt(numeros));

        if (lletraCalcul == lletra) {
            conexioBD conexio = new conexioBD();
            conexio.obrirConexio();
            try {
                ResultSet resultat = conexio.ecjecutarSelect("SELECT`dni` FROM `pareMare` WHERE `dni` LIKE '" + numeros + lletra + "';");
                if (resultat.next()) {
                    missatge("Aquest DNI ja està registrat.");
                    conexio.tancaConexio();
                    return false;
                }
                conexio.tancaConexio();
            } catch (SQLException ex) {
                System.out.println(ex);
            }
        }
        
        if (lletraCalcul != lletra) {
            if (dni.equals(dniObligatori.getText())) {
                missatge("El DNI introduït del 1r progenitor és incorrecte.");
            } else {
                missatge("El DNI introduït del 2n progenitor és incorrecte.");
            }
        }

        return lletraCalcul == lletra;
    }

    private boolean dataCorrecte(Calendar dataCalen) {
        String data = dataString(dataCalen);

        LocalDate dataGuardada = LocalDate.parse(data, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate dataActual = LocalDate.now();

        int anys = Period.between(dataGuardada, dataActual).getYears();
        if (anys < 18) {
            missatge("Els pares no poden ser menors de 18 anys.");
            return false;
        } else {
            return true;
        }
    }

    private char calcularLletraDNI(int numerosDNI) {
        String lletres = "TRWAGMYFPDXBNJZSQVHLCKE";
        int index = numerosDNI % 23;
        return lletres.charAt(index);
    }

    private int preguntaSiNo(String missatge) {
        return JOptionPane.showConfirmDialog(this, missatge, "Confirmación", JOptionPane.YES_NO_OPTION);
    }

    private boolean campsBuitsUsuari() {
        if (nomUsuari.getText().isEmpty()) {
            missatge("S'ha d'introduir el nom de l'usuari.");
            return true;
        } else if (correuElectronic.getText().isEmpty()) {
            missatge("S'ha d'introduir el correu de l'usuari.");
            return true;
        } else if (contrasenya1.getText().isEmpty()) {
            missatge("S'ha d'introduir la contrasenya de l'usuari.");
            return true;
        } else if (contrasenya2.getText().isEmpty()) {
            missatge("S'ha d'introduir la confirmació de la contrasenya de l'usuari.");
            return true;
        } else {
            return false;
        }
    }

    private boolean usuariCorrecte() {
        conexioBD conectarBD = new conexioBD();
        conectarBD.obrirConexio();
        try {
            ResultSet resultat = conectarBD.ecjecutarSelect("SELECT `nomUsuari` FROM `usuari` WHERE `nomUsuari`LIKE '" + nomUsuari.getText() + "';");
            if (resultat.next()) {
                missatge("El nom de l'usuari ja existeix, ha de ser un altre.");
                conectarBD.tancaConexio();
                return false;
            } else {
                conectarBD.tancaConexio();
                if (correuValid(correuElectronic.getText())) {
                    if (contrasenya1.getText().equals(contrasenya2.getText())) {
                        if (contrasenya1.getText().length() < 8) {
                            missatge("La contrasenya ha de tenir almenys 8 caràcters.");
                            return false;
                        } else{
                            if (!contrasenya1.getText().matches(".*[!@#$%^&*()-_=+\\\\|[{]};:'\\\",<.>/?].*")) {
                                missatge("La contrasenya ha de contenir almenys un caràcter especial (!@#$%^&*()-_=+\\\\|[{]};:'\\\",<.>/?).");
                                return false;
                            } else if (!contrasenya1.getText().matches(".*[A-Z].*")) {
                                missatge("La contrasenya ha de contenir almenys una majúscula.");
                                return false;
                            } else if (!contrasenya1.getText().matches(".*[a-z].*")) {
                                missatge("La contrasenya ha de contenir almenys una minúscula.");
                                return false;
                            } else if (!contrasenya1.getText().matches(".*\\d.*")) {
                                missatge("La contrasenya ha de contenir almenys un número.");
                                return false;
                            } else {
                                return true;
                            }
                        }
                    } else {
                        missatge("Les contrasenyes introduïdes no coincideixen.");
                        return false;
                    }
                } else {
                    missatge("Correu electrònic incorrecte sol s'accepta els dominis (gmail/hotmail/yahoo \".\" com/es/mx), Ex.: \"hola@gmail.com\".");
                    return false;
                }
            }
        } catch (SQLException ex) {
            missatge("MySQL Error: " + ex);
        }
        conectarBD.tancaConexio();
        return false;
    }

    private boolean correuValid(String email) {
        String regex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:gmail|hotmail|yahoo)\\.(?:com|es|mx)$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }

    private void insertarCredencials() {
        if (dosProgenitos) {
            conexioBD conectarBD = new conexioBD();
            conectarBD.obrirConexio();
            try {
                conectarBD.ecjecutarActualitzar("INSERT INTO `pareMare`(`dni`, `nom`, `cognom`, `dataNaixe`) VALUES ('" + dniMayuscula(dniObligatori.getText()) + "','" + nomObligatori.getText() + "','" + cognomObligatori.getText() + "','" + dataString(dataObligatori.getCalendar()) + "'), ('" + dniMayuscula(dniOpcional.getText()) + "','" + nomOpcional.getText() + "','" + cognomOpcional.getText() + "','" + dataString(dataOpcional.getCalendar()) + "');");
                conectarBD.ecjecutarActualitzar("INSERT INTO `usuari`(`nomUsuari`, `contrasenya`, `correuElecUsuari`) VALUES ('" + nomUsuari.getText() + "','" + BCrypt.hashpw(contrasenya1.getText(), BCrypt.gensalt()) + "','" + correuElectronic.getText() + "');");
                conectarBD.ecjecutarActualitzar("INSERT INTO `familia`(`dniProje1`, `dniProje2`, `dniFill`, `nomUsuariFamil`) VALUES ('" + dniMayuscula(dniObligatori.getText()) + "','" + dniMayuscula(dniOpcional.getText()) + "','','" + nomUsuari.getText() + "')");
            } catch (SQLException ex) {
                missatge(conectarBD.missatgeError(ex.getErrorCode()));
            } finally {
                conectarBD.tancaConexio();
            }
        } else {
            conexioBD conectarBD = new conexioBD();
            conectarBD.obrirConexio();
            try {
                conectarBD.ecjecutarActualitzar("INSERT INTO `pareMare`(`dni`, `nom`, `cognom`, `dataNaixe`) VALUES ('" + dniMayuscula(dniObligatori.getText()) + "','" + nomObligatori.getText() + "','" + cognomObligatori.getText() + "','" + dataString(dataObligatori.getCalendar()) + "');");
                conectarBD.ecjecutarActualitzar("INSERT INTO `usuari`(`nomUsuari`, `contrasenya`, `correuElecUsuari`) VALUES ('" + nomUsuari.getText() + "','" + BCrypt.hashpw(contrasenya1.getText(), BCrypt.gensalt()) + "','" + correuElectronic.getText() + "');");
                conectarBD.ecjecutarActualitzar("INSERT INTO `familia`(`dniProje1`, `nomUsuariFamil`) VALUES ('" + dniMayuscula(dniObligatori.getText()) + "','" + nomUsuari.getText() + "')");
            } catch (SQLException ex) {
                missatge(conectarBD.missatgeError(ex.getErrorCode()));
            } finally {
                conectarBD.tancaConexio();
            }
        }
    }

    private String dniMayuscula(String dni) {
        String num = "";
        for (int i = 0; i < dni.length() - 1; i++) {
            num = num + dni.charAt(i);
        }
        char lletra = Character.toUpperCase(dni.charAt(8));
        return num + lletra;
    }
}
